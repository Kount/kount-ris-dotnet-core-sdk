//-----------------------------------------------------------------------
// <copyright file="Response.cs" company="Keynetics Inc">
//     Copyright Keynetics. All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
namespace Kount.Ris
{
    using Kount.Log.Binding;
    using Kount.Log.Factory;
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Text.RegularExpressions;

    /// <summary>
    /// Response immutable data object containing data from the RIS server.<br/>
    /// <b>Author:</b> Kount <a>custserv@kount.com</a>;<br/>
    /// <b>Version:</b> 7.0.0. <br/>
    /// <b>Copyright:</b> 2010 Keynetics Inc <br/>
    /// </summary>
    public class Response
    {
        /// <summary>
        /// The logger to use
        /// </summary>
        private ILogger logger;

        /// <summary>
        /// Response hashtable
        /// </summary>
        private Hashtable response = new Hashtable();

        /// <summary>
        /// Warnings hashtable
        /// </summary>
        private Hashtable warnings = new Hashtable();

        /// <summary>
        /// Raw RIS output data
        /// </summary>
        private string raw;

        /// <summary>
        /// Response constructor.
        /// </summary>
        /// <param name="raw">Splits name=value formatted response string
        /// populating a hash for getters.</param>
        public Response(string raw)
        {
            ILoggerFactory factory = LogFactory.GetLoggerFactory();
            this.logger = factory.GetLogger(typeof(Response).ToString());
            this.logger.Debug("RIS Response:\n" + raw);
            this.raw = raw;
            string[] lines = Regex.Split(raw, "[\r\n]+");
            foreach (string line in lines)
            {
                string[] result = line.Split(new char[] { '=' });
                if (result.Length > 1)
                {
                    this.response.Add(result[0], result[1]);
                }
            }
        }

        /// <summary>
        /// Get the error code returned from the server
        /// </summary>
        /// <returns>Error code returned from the RIS server.</returns>
        public string GetErrorCode()
        {
            if (this.response.ContainsKey("ERRO"))
            {
                return (string)this.response["ERRO"];
            }
            else
            {
                return "0";
            }
        }

        /// <summary>
        /// Get the version of the RIS response.
        /// </summary>
        /// <returns>String of the version.</returns>
        public string GetVersion()
        {
            string str = (string)this.response["VERS"];
            return (string)this.response["VERS"];
        }

        /// <summary>
        /// Get the mode of the RIS request.
        /// </summary>
        /// <returns>Character of the original RIS request mode: e.g. U.
        /// </returns>
        public string GetMode()
        {
            return (string)this.response["MODE"];
        }

        /// <summary>
        /// Get Kount transaction Id.
        /// </summary>
        /// <returns>Alphanumeric transaction id generated by Kount.</returns>
        public string GetTransactionId()
        {
            return (string)this.response["TRAN"];
        }

        /// <summary>
        /// Get the merchant Id of the merchant making the request.
        /// </summary>
        /// <returns>Merchant Id.</returns>
        public string GetMerchantId()
        {
            return (string)this.response["MERC"];
        }

        /// <summary>
        /// Get the session Id.
        /// </summary>
        /// <returns>Session Id of this transaction generated by the merchant.
        /// </returns>
        public string GetSessionId()
        {
            return (string)this.response["SESS"];
        }

        /// <summary>
        /// Get the Order Number.
        /// </summary>
        /// <returns>Order number generated by the merchant.</returns>
        public string GetOrderNumber()
        {
            return (string)this.response["ORDR"];
        }

        /// <summary>
        /// Get the automated Kount RIS response.
        /// </summary>
        /// <returns>(A)pprove, (R)eview, or (D)ecline.</returns>
        public string GetAuto()
        {
            return (string)this.response["AUTO"];
        }

        /// <summary>
        /// Get the reason for the RIS response.
        /// </summary>
        /// <returns>Main response reason, e.g. LIST, SCOR, etc.</returns>
        [Obsolete("Version 5.0.0 - 2012. Use Kount.Ris.Response.GetReasonCode() : string")]
        public string GetReason()
        {
            string message = "The method " +
                "Kount.Ris.Response.GetReason() is obsolete. Use " +
                "Kount.Ris.Response.GetReasonCode() instead.";
            this.logger.Info(message);
            return (string)this.response["REAS"];
        }

        /// <summary>
        /// Get the merchant defined reason code for the RIS response.
        /// </summary>
        /// <returns>Reason code</returns>
        public string GetReasonCode()
        {
            return (string)this.response["REASON_CODE"];
        }

        /// <summary>
        /// Get the Kount score.
        /// </summary>
        /// <returns>1 to 99. The highter the score, the more risk.</returns>
        public string GetScore()
        {
            return (string)this.response["SCOR"];
        }


        /// <summary>        /// Get the Kount Omniscore.        /// </summary>        /// <returns>1 to 99.9. The highter the score, the less risk.</returns>        public String getOmniScore()        {            return (string)response["OMNISCORE"];        }

        /// <summary>
        /// Get the geo location of the client
        /// </summary>
        /// <returns>Geox of the client</returns>
        public string GetGeox()
        {
            return (string)this.response["GEOX"];
        }

        /// <summary>
        /// Get the brand of the credit card if a card was the payment method
        /// </summary>
        /// <returns>Brand of credit card, e.g. VISA</returns>
        public string GetBrand()
        {
            return (string)this.response["BRND"];
        }

        /// <summary>
        /// 6 hour card velocity
        /// </summary>
        /// <returns>Number of times this card number was used in the last 6
        /// hours</returns>
        public string GetVelo()
        {
            return (string)this.response["VELO"];
        }

        /// <summary>
        /// 2 week card velocity
        /// </summary>
        /// <returns>Number of times this card number was used in the last
        /// two weeks</returns>
        public string GetVmax()
        {
            return (string)this.response["VMAX"];
        }

        /// <summary>
        /// Get the network type
        /// </summary>
        /// <returns>Get the network type of the client, e.g. L for library
        /// </returns>
        public string GetNetwork()
        {
            return (string)this.response["NETW"];
        }

        /// <summary>
        /// Get the Know Your Customer flag
        /// </summary>
        /// <returns>Y means a KYC match, N means no match.</returns>
        public string GetKnowYourCustomer()
        {
            return (string)this.response["KYCF"];
        }

        /// <summary>
        /// Get the customer region
        /// </summary>
        /// <returns>US state abbreviation or country code.</returns>
        public string GetRegion()
        {
            return (string)this.response["REGN"];
        }

        /// <summary>
        /// Get the Kaptcha flag: enabled upon request and for when a RIS
        /// record has no Kaptcha data
        /// </summary>
        /// <returns>Returns Y or N</returns>
        public string GetKaptcha()
        {
            return (string)this.response["KAPT"];
        }

        /// <summary>
        /// Get a string representing whether the remote device is using a
        /// proxy
        /// </summary>
        /// <returns>Returns Y or N</returns>
        public string GetProxy()
        {
            return (string)this.response["PROXY"];
        }

        /// <summary>
        /// Get the number of transactions associated with the email
        /// </summary>
        /// <returns>Number of emails</returns>
        public string GetEmails()
        {
            return (string)this.response["EMAILS"];
        }

        /// <summary>
        /// Get the two character country code setting in the remote device's
        /// browser
        /// </summary>
        /// <returns>Get the country</returns>
        public string GetHttpCountry()
        {
            return (string)this.response["HTTP_COUNTRY"];
        }

        /// <summary>
        /// Get the two character country code setting in the remote device's
        /// browser
        /// </summary>
        /// <returns>The time zone</returns>
        public string GetTimeZone()
        {
            return (string)this.response["TIMEZONE"];
        }

        /// <summary>
        /// Get the number of transactions associated with the credit card
        /// </summary>
        /// <returns>Number of cards</returns>
        public string GetCards()
        {
            return (string)this.response["CARDS"];
        }

        /// <summary>
        /// Get a string representing whether the end device is a remotely
        /// controlled computer
        /// </summary>
        /// <returns>"Y" or "N"</returns>
        public string GetPcRemote()
        {
            return (string)this.response["PC_REMOTE"];
        }

        /// <summary>
        /// Get the number of transactions associated with the particular
        /// device
        /// </summary>
        /// <returns>Number of devices</returns>
        public string GetDevices()
        {
            return (string)this.response["DEVICES"];
        }

        /// <summary>
        /// Get a string representing the five layers (Operating System, SSL,
        /// HTTP, Flash, JavaScript) of the remote device
        /// </summary>
        /// <returns>Device layers</returns>
        public string GetDeviceLayers()
        {
            return (string)this.response["DEVICE_LAYERS"];
        }

        /// <summary>
        /// Get the mobile device's wireless application protocol
        /// </summary>
        /// <returns>The protocol</returns>
        public string GetMobileForwarder()
        {
            return (string)this.response["MOBILE_FORWARDER"];
        }

        /// <summary>
        /// Get a string representing whether or not the remote device is
        /// voice controlled
        /// </summary>
        /// <returns>"Y" or "N"</returns>
        public string GetVoiceDevice()
        {
            return (string)this.response["VOICE_DEVICE"];
        }

        /// <summary>
        /// Get local time of the remote device in the YYYY-MM-DD format
        /// </summary>
        /// <returns>Local time</returns>
        public string GetLocalTime()
        {
            return (string)this.response["LOCALTIME"];
        }

        /// <summary>
        /// Get the mobile device type
        /// </summary>
        /// <returns>Mobile type</returns>
        public string GetMobileType()
        {
            return (string)this.response["MOBILE_TYPE"];
        }

        /// <summary>
        /// Get the device finger print
        /// </summary>
        /// <returns>Finger print</returns>
        public string GetFingerPrint()
        {
            return (string)this.response["FINGERPRINT"];
        }

        /// <summary>
        /// Get a string representing whether or not the remote device allows
        /// flash.
        /// </summary>
        /// <returns>"Y" or "N"</returns>
        public string GetFlash()
        {
            return (string)this.response["FLASH"];
        }

        /// <summary>
        /// Get the language setting on the remote device
        /// </summary>
        /// <returns>The language</returns>
        public string GetLanguage()
        {
            return (string)this.response["LANGUAGE"];
        }

        /// <summary>
        /// Get the remote device's country of origin as a two character code
        /// </summary>
        /// <returns>The country</returns>
        public string GetCountry()
        {
            return (string)this.response["COUNTRY"];
        }

        /// <summary>
        /// Get a string representing whether the remote device allows
        /// JavaScript
        /// </summary>
        /// <returns>"Y" or "N"</returns>
        public string GetJavaScript()
        {
            return (string)this.response["JAVASCRIPT"];
        }

        /// <summary>
        /// Get a string representing whether the remote device allows cookies
        /// </summary>
        /// <returns>"Y" or "N"</returns>
        public string GetCookies()
        {
            return (string)this.response["COOKIES"];
        }

        /// <summary>
        /// Get a string representing whether the remote device is a mobile
        /// device
        /// </summary>
        /// <returns>"Y" or "N"</returns>
        public string GetMobileDevice()
        {
            return (string)this.response["MOBILE_DEVICE"];
        }

        /// <summary>
        /// Get the site ID
        /// </summary>
        /// <returns>The site ID</returns>
        public string GetSite()
        {
            return (string)this.response["SITE"];
        }

        /// <summary>
        /// Get MasterCard Fraud Score associated with the RIS transaction.
        /// Please contact your Kount representative to enable support for this
        /// feature in your merchant account.
        /// </summary>
        /// <returns>MasterCard Fraud Score</returns>
        public string GetMasterCardFraudScore()
        {
            return (string)this.response["MASTERCARD"];
        }

        /// <summary>
        /// Get pierced IP address
        /// </summary>
        /// <returns>Pierced IP address</returns>
        public string GetPiercedIPAddress()
        {
            return (string)this.response["PIP_IPAD"];
        }

        /// <summary>
        /// Get latitude of pierced IP address
        /// </summary>
        /// <returns>Latitude of pierced IP address</returns>
        public string GetPiercedIPAddressLatitude()
        {
            return (string)this.response["PIP_LAT"];
        }

        /// <summary>
        /// Get longitude of pierced IP address
        /// </summary>
        /// <returns>Longitude of pierced IP address</returns>
        public string GetPiercedIPAddressLongitude()
        {
            return (string)this.response["PIP_LON"];
        }

        /// <summary>
        /// Get country of pierced IP address
        /// </summary>
        /// <returns>Country of pierced IP address</returns>
        public string GetPiercedIPAddressCountry()
        {
            return (string)this.response["PIP_COUNTRY"];
        }

        /// <summary>
        /// Get region of pierced IP address
        /// </summary>
        /// <returns>Region of pierced IP address</returns>
        public string GetPiercedIPAddressRegion()
        {
            return (string)this.response["PIP_REGION"];
        }

        /// <summary>
        /// Get city of pierced IP address
        /// </summary>
        /// <returns>City of pierced IP address</returns>
        public string GetPiercedIPAddressCity()
        {
            return (string)this.response["PIP_CITY"];
        }

        /// <summary>
        /// Get organization of pierced IP address
        /// </summary>
        /// <returns>Organization of pierced IP address</returns>
        public string GetPiercedIPAddressOrganization()
        {
            return (string)this.response["PIP_ORG"];
        }

        /// <summary>
        /// Get proxy IP address
        /// </summary>
        /// <returns>Proxy IP Address</returns>
        public string GetIPAddress()
        {
            return (string)this.response["IP_IPAD"];
        }

        /// <summary>
        /// Get latitude of proxy IP address
        /// </summary>
        /// <returns>Latitude of proxy IP address</returns>
        public string GetIPAddressLatitude()
        {
            return (string)this.response["IP_LAT"];
        }

        /// <summary>
        /// Get longitude of proxy IP address
        /// </summary>
        /// <returns>Longitude of proxy IP address</returns>
        public string GetIPAddressLongitude()
        {
            return (string)this.response["IP_LON"];
        }

        /// <summary>
        /// Get country of proxy IP address
        /// </summary>
        /// <returns>Country of proxy IP address</returns>
        public string GetIPAddressCountry()
        {
            return (string)this.response["IP_COUNTRY"];
        }

        /// <summary>
        /// Get region of proxy IP address
        /// </summary>
        /// <returns>Region of proxy IP address</returns>
        public string GetIPAddressRegion()
        {
            return (string)this.response["IP_REGION"];
        }

        /// <summary>
        /// Get city of proxy IP address
        /// </summary>
        /// <returns>City of proxy IP address</returns>
        public string GetIPAddressCity()
        {
            return (string)this.response["IP_CITY"];
        }

        /// <summary>
        /// Get organization of proxy IP address
        /// </summary>
        /// <returns>Organization of proxy IP address</returns>
        public string GetIPAddressOrganization()
        {
            return (string)this.response["IP_ORG"];
        }

        /// <summary>
        /// Get date device first seen
        /// </summary>
        /// <returns>Date device first seen</returns>
        public string GetDateDeviceFirstSeen()
        {
            return (string)this.response["DDFS"];
        }

        /// <summary>
        /// Get user agent string
        /// </summary>
        /// <returns>User agent string</returns>
        public string GetUserAgentString()
        {
            return (string)this.response["UAS"];
        }

        /// <summary>
        /// Get device screen resolution
        /// </summary>
        /// <returns>Device screen resolution (HxW - Height by Width)</returns>
        public string GetDeviceScreenResolution()
        {
            return (string)this.response["DSR"];
        }

        /// <summary>
        /// Get operating system (derived from user agent string)
        /// </summary>
        /// <returns>OS (operating system)</returns>
        public string GetOS()
        {
            return (string)this.response["OS"];
        }

        /// <summary>
        /// Get browser (derived from user agent string)
        /// </summary>
        /// <returns>Browser string</returns>
        public string GetBrowser()
        {
            return (string)this.response["BROWSER"];
        }

        /// <summary>
        /// Get the original raw name=value pair string of the response.
        /// </summary>
        /// <returns>Raw string of the response.</returns>
        public override string ToString()
        {
            return this.raw;
        }

        /// <summary>
        /// Get a Map of the rules triggered by this Response.
        /// </summary>
        /// <returns>Map of the rules</returns>
        public IDictionary GetRulesTriggered()
        {
            IDictionary rules = new Hashtable();
            int ruleCount = this.GetNumberRulesTriggered();
            for (int i = 0; i < ruleCount; i++)
            {
                rules.Add(
                    this.response["RULE_ID_" + i],
                    this.response["RULE_DESCRIPTION_" + i]);
            }

            return rules;
        }

        /// <summary>
        /// Get the number of rules triggered with the response.
        /// </summary>
        /// <returns>Number of rules</returns>
        public int GetNumberRulesTriggered()
        {
            // A RIS response will always contain the field RULES_TRIGGERED
            // which will be set to zero if there are no rules triggered.
            int count = 0;
            try
            {
                string value = (string)this.response["RULES_TRIGGERED"];
                if (!Int32.TryParse(value, out count))
                {
                    count = 0;
                }
            }
            catch (Exception nfe)
            {
                this.logger.Error(
                        "RIS returned a RULES_TRIGGERED field " +
                        "which could not be parsed to a number",
                        nfe);
            }

            return count;
        }

        /// <summary>
        /// Get a Map of the warnings returned by this Response.
        /// </summary>
        /// <returns>Get the warnings</returns>
        public List<string> GetWarnings()
        {
            List<string> warnings = new List<string>();
            int warningCount = this.GetWarningCount();
            for (int i = 0; i < warningCount; i++)
            {
                warnings.Add((string)this.response["WARNING_" + i]);
            }

            return warnings;
        }

        /// <summary>
        /// Get the number of warnings associated with the response.
        /// </summary>
        /// <returns>Number of warnings</returns>
        public int GetWarningCount()
        {
            // A RIS response will always contain the field WARNING_COUNT which
            // will be set to zero if there are no warnings.
            int count = 0;
            try
            {
                string value = (string)this.response["WARNING_COUNT"];
                if (!Int32.TryParse(value, out count))
                {
                    count = 0;
                }
            }
            catch (Exception nfe)
            {
                this.logger.Error(
                        "RIS returned a WARNING_COUNT field " +
                        "which could not be parsed to a number",
                        nfe);
            }

            return count;
        }

        /// <summary>
        /// Get a map of the errors associated with the response.
        /// </summary>
        /// <returns>Array of errors</returns>
        public List<string> GetErrors()
        {
            List<string> errors = new List<string>();
            int errorCount = this.GetErrorCount();
            for (int i = 0; i < errorCount; i++)
            {
                errors.Add((string)this.response["ERROR_" + i]);
            }

            return errors;
        }

        /// <summary>
        /// Get the number of errors associated with the response.
        /// </summary>
        /// <returns>Number of errors</returns>
        public int GetErrorCount()
        {
            // A normal response will not contain any errors in which case the
            // RIS response field ERROR_COUNT will not be sent.
            int count = 0;
            try
            {
                string value = (string)this.response["ERROR_COUNT"];
                if (!Int32.TryParse(value, out count))
                {
                    count = 0;
                }
            }
            catch (Exception nfe)
            {
                this.logger.Error(
                        "RIS returned an ERROR_COUNT field which could " +
                        "not be parsed to a number",
                        nfe);
            }

            return count;
        }

        /// <summary>
        /// Check if the response has errors.
        /// </summary>
        /// <returns>True if response has errors, false otherwise.</returns>
        public bool HasErrors()
        {
            return this.GetErrorCount() > 0;
        }

        /// <summary>
        /// Get LexisNexis Chargeback Defender attribute data associated with
        /// the RIS transaction. Please contact your Kount representative to
        /// enable support for this feature in your merchant account.
        /// </summary>
        /// <returns>Map of attributes where the keys are the attribute names
        /// and the values are the attribute values.</returns>
        public IDictionary GetLexisNexisCbdAttributes()
        {
            return this.GetPrefixedResponseDataDictionary("CBD_");
        }

        /// <summary>
        /// Get LexisNexis Instant ID attribute data associated with
        /// the RIS transaction. Please contact your Kount representative to
        /// enable support for this feature in your merchant account.
        /// </summary>
        /// <returns>Map of attributes where the keys are the attribute names
        /// and the values are the attribute values.</returns>
        public IDictionary GetLexisNexisInstantIdAttributes()
        {
            return this.GetPrefixedResponseDataDictionary("INSTANTID_");
        }

        /// <summary>
        /// Get a map of the rules counters triggered in the response.
        /// </summary>
        /// <returns>
        /// Map Key: counter name, Value: counter value.
        /// </returns>
        public IDictionary GetCountersTriggered()
        {
            IDictionary counters = new Hashtable();
            int numCounters = this.GetNumberCountersTriggered();
            for (int i = 0; i < numCounters; i++)
            {
                string counterName =
                        (string)this.response["COUNTER_NAME_" + i];
                counters.Add(
                        counterName,
                        (string)this.response["COUNTER_VALUE_" + i]);
            }

            return counters;
        }

        /// <summary>
        /// Get the number of rules counters triggered in the response.
        /// </summary>
        /// <returns>
        /// Number of counters triggered
        /// </returns>
        public int GetNumberCountersTriggered()
        {
            int count = 0;
            try
            {
                string value = (string)this.response["COUNTERS_TRIGGERED"];
                if (!Int32.TryParse(value, out count))
                {
                    count = 0;
                }
            }
            catch (Exception nfe)
            {
                this.logger.Error(
                    "RIS returned a COUNTERS_TRIGGERED field " +
                    "which could not be parsed to a number",
                    nfe);
            }

            return count;
        }

        /// <summary>
        /// Get the Kount Central Customer ID
        /// </summary>
        /// <returns>
        /// Kount Central Customer ID
        /// </returns>
        public string GetKountCentralCustomerId()
        {
            return (string)this.response["KC_CUSTOMER_ID"];
        }

        /// <summary>
        /// Get all the Kount Central Warnings for this response
        /// </summary>
        /// <returns>
        /// Kount Central Warnings
        /// </returns>
        public List<string> GetKountCentralWarnings()
        {
            List<string> warnings = new List<string>();
            int warningCount = this.GetKountCentralWarningCount();
            for (int i = warningCount; 0 < i; i--)
            {
                warnings.Add((string)this.response["KC_WARNING_" + i]);
            }

            return warnings;
        }

        /// <summary>
        /// Get the number of Kount Central Warnings
        /// </summary>
        /// <returns>
        /// Number of Kount Central Warnings
        /// </returns>
        public int GetKountCentralWarningCount()
        {
            int count = 0;
            try
            {
                string value = (string)this.response["KC_WARNING_COUNT"];
                if (!Int32.TryParse(value, out count))
                {
                    count = 0;
                }
            }
            catch (Exception e)
            {
                this.logger.Error("KC_WARNING_COUNT doesn't contain a number", e);
            }

            return count;
        }

        /// <summary>
        /// Get all the Kount Central Errors for this response
        /// </summary>
        /// <returns>
        /// Kount Central Errors
        /// </returns>
        public List<string> GetKountCentralErrors()
        {
            List<string> errors = new List<string>();
            int errorCount = this.GetKountCentralErrorCount();
            for (int i = errorCount; 0 < i; i--)
            {
                errors.Add((string)this.response["KC_ERROR_" + i]);
            }

            return errors;
        }

        /// <summary>
        /// Get the number of Kount Central Errors
        /// </summary>
        /// <returns>
        /// Number of Kount Central Errors
        /// </returns>
        public int GetKountCentralErrorCount()
        {
            int count = 0;
            try
            {
                string kcErr = (string)this.response["KC_ERROR_COUNT"];
                if (!Int32.TryParse(kcErr, out count))
                {
                    count = 0;
                }
            }
            catch (Exception e)
            {
                this.logger.Error("KC_ERROR_COUNT doesn't contain a number", e);
            }

            return count;
        }

        /// <summary>
        /// Get the number of Kount Central thresholds triggered
        /// </summary>
        /// <returns>
        /// Number of Kount Central thresholds triggered
        /// </returns>
        public int GetKountCentralNumberThresholdsTriggered()
        {
            int count = 0;
            try
            {
                string value = (string)this.response["KC_TRIGGERED_COUNT"];
                if (!Int32.TryParse(value, out count))
                {
                    count = 0;
                }
            }
            catch (Exception e)
            {
                this.logger.Error("KC_ERROR_COUNT doesn't contain a number", e);
            }

            return count;
        }

        /// <summary>
        /// Get the Kount Central Decision
        /// </summary>
        /// <returns>
        /// The Kount Central Decision
        /// </returns>
        public string GetKountCentralDecision()
        {
            return (string)this.response["KC_DECISION"];
        }

        /// <summary>
        /// Get list of KcEvent objects for this Response
        /// </summary>
        /// <returns>
        /// List of KcEvent objects
        /// </returns>
        public List<KcEvent> GetKountCentralThresholdEvents()
        {
            List<KcEvent> events = new List<KcEvent>();
            string code, decision, expression;

            int count = this.GetKountCentralNumberThresholdsTriggered();
            for (int i = count; i > 0; i--)
            {
                code = (string)this.response["KC_EVENT_" + i + "_CODE"];
                decision = (string)this.response["KC_EVENT_" + i + "_DECISION"];
                expression = (string)this.response["KC_EVENT_" + i + "_EXPRESSION"];
                events.Add(new KcEvent(code, expression, decision));
            }

            return events;
        }

        /// <summary>
        /// Get a dictionary of the response data where the keys are the RIS
        /// response keys that begin with a specified prefix.
        /// </summary>
        /// <param name="prefix">Key prefix.</param>
        /// <returns>Dictionary of key-value pairs for a specified RIS key
        /// prefix.</returns>
        protected IDictionary GetPrefixedResponseDataDictionary(
            string prefix)
        {
            IDictionary data = new Hashtable();
            foreach (string key in this.response.Keys)
            {
                if (prefix.Length < key.Length &&
                    key.Substring(0, prefix.Length).Equals(prefix))
                {
                    data.Add(
                        key.Substring(prefix.Length),
                        this.response[key]);
                }
            }

            return data;
        }
    }
}